name: One-Shot Training via SSM

on: [push, pull_request]

permissions:
  id-token: write
  contents: read
  packages: write

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE }}
          aws-region: eu-north-1

      - name: Run black (check only)
        run: black . --check

      - name: Run flake8 linter
        run: flake8 .

      - name: Run unit tests
        run: |
          PYTHONPATH=. pytest tests/

      - name: Validate training configurations
        run: |
          echo "Validating all training configurations..."
          for config in configs/*.yaml; do
            if [ -f "$config" ]; then
              echo "Validating $config"
              python -c "import yaml; from utils.training_types import TrainingConfig; config_dict = yaml.safe_load(open('$config')); config = TrainingConfig.from_dict(config_dict); print(f'✓ {config.model_type} configuration is valid')" || (echo "✗ Configuration error in $config" && exit 1)
            fi
          done

      - name: Build and Push Training Container
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Building training container with commit ${{ github.sha }}..."
          
          # Set image names
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/ai-drug-training"
          IMAGE_TAG="${{ github.sha }}"
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Build the training container
          docker build -t "$IMAGE_NAME:$IMAGE_TAG" -t "$IMAGE_NAME:latest" .
          
          # Push both tags
          docker push "$IMAGE_NAME:$IMAGE_TAG"
          docker push "$IMAGE_NAME:latest"
          
          echo "✅ Built and pushed training container:"
          echo "  - $IMAGE_NAME:$IMAGE_TAG"
          echo "  - $IMAGE_NAME:latest"

      - name: Ensure EC2 Instance is Running
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Checking and starting EC2 instance if needed..."
          
          INSTANCE_ID="${{ secrets.AWS_EC2_INSTANCE_ID }}"
          
          # Check current instance state
          INSTANCE_STATE=$(aws ec2 describe-instances \
            --instance-ids "$INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].State.Name' \
            --output text)
          
          echo "Current instance state: $INSTANCE_STATE"
          
          # Start instance if not running
          if [ "$INSTANCE_STATE" != "running" ]; then
            echo "Starting EC2 instance $INSTANCE_ID..."
            aws ec2 start-instances --instance-ids "$INSTANCE_ID"
            
            echo "Waiting for instance to be running..."
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
            
            # Wait additional time for services to initialize
            echo "Instance started. Waiting 60s for services to initialize..."
            sleep 60
            
            echo "✅ EC2 instance is now running"
          else
            echo "✅ EC2 instance is already running"
          fi

      - name: Deploy via SSM Run Command
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Triggering one-shot training via SSM..."
          
          INSTANCE_ID="${{ secrets.AWS_EC2_INSTANCE_ID }}"
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')/ai-drug-training"
          IMAGE_TAG="${{ github.sha }}"
          
          # Create SSM command for one-shot training
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "set -e",
              "echo \"Starting one-shot training deployment...\"",
              "TOKEN=$(aws ssm get-parameter --name \"ghcr-ro-token\" --with-decryption --query \"Parameter.Value\" --output text)",
              "echo $TOKEN | docker login ghcr.io -u '${{ github.actor }}' --password-stdin",
              "docker pull '$IMAGE_NAME:$IMAGE_TAG'",
              "docker run --rm --network mlflow_default -e MLFLOW_TRACKING_URI=http://mlflow:5000 -e AWS_DEFAULT_REGION=eu-north-1 '$IMAGE_NAME:$IMAGE_TAG'",
              "echo \"Training completed successfully\""
            ]' \
            --output text \
            --query 'Command.CommandId')
          
          echo "SSM Command ID: $COMMAND_ID"
          
          # Wait for command to complete (max 1 hour)
          echo "Waiting for training to complete..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --cli-read-timeout 3600 \
            --cli-connect-timeout 60
          
          # Get command output
          COMMAND_OUTPUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --output text \
            --query 'StandardOutputContent')
          
          COMMAND_STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "$INSTANCE_ID" \
            --output text \
            --query 'Status')
          
          echo ""
          echo "=== Command Output ==="
          echo "$COMMAND_OUTPUT"
          echo ""
          
          if [ "$COMMAND_STATUS" = "Success" ]; then
            echo "✅ One-shot training completed successfully!"
          else
            echo "❌ Training failed with status: $COMMAND_STATUS"
            
            # Get error output if available
            ERROR_OUTPUT=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$INSTANCE_ID" \
              --output text \
              --query 'StandardErrorContent' 2>/dev/null || echo "No error details available")
            
            echo "Error details: $ERROR_OUTPUT"
            exit 1
          fi
          
          echo ""
          echo "🚀 Pipeline Summary:"
          echo "Docker image: $IMAGE_NAME:$IMAGE_TAG"
          echo "Commit SHA: ${{ github.sha }}"
          echo "SSM Command ID: $COMMAND_ID"
          echo "Training Status: $COMMAND_STATUS"
