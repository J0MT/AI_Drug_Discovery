# MLflow Production Setup with Persistent Backend
# Deploy this on a small, always-on EC2 instance (t3.micro/small)

version: "3.8"

services:
  # MLflow Tracking Server
  mlflow:
    image: python:3.10-slim
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      # Backend store: PostgreSQL for metadata
      BACKEND_STORE_URI: postgresql://mlflow:${POSTGRES_PASSWORD}@postgres:5432/mlflowdb
      # Artifact store: S3 for model files
      DEFAULT_ARTIFACT_ROOT: s3://ai-drug-data/mlflow-artifacts
      # AWS credentials (use IAM role in production)
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: eu-north-1
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server 
          --host 0.0.0.0 
          --port 5000 
          --backend-store-uri postgresql://mlflow:${POSTGRES_PASSWORD}@postgres:5432/mlflowdb
          --default-artifact-root s3://ai-drug-data/mlflow-artifacts
          --serve-artifacts
      "
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Database for MLflow metadata
  postgres:
    image: postgres:15-alpine
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: mlflow
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: mlflowdb
    volumes:
      # Persistent storage for database
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow -d mlflowdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Nginx reverse proxy (optional, for HTTPS/auth)
  nginx:
    image: nginx:alpine
    container_name: mlflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mlflow
    restart: unless-stopped

volumes:
  # Persistent volume for PostgreSQL data
  postgres_data:
    driver: local

networks:
  default:
    name: mlflow-network